#pragma target("avx")
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> P;
typedef vector<ll> V;
typedef unordered_map<ll, ll> U_MAP;
typedef priority_queue<ll> pq;
typedef priority_queue<ll, vector<ll>, greater<ll>> rpq;
const int INF = 1e9, MOD = 1e9 + 7, ohara = 1e6 + 10;
const ll LINF = 1e18;

#define rep(i, n) for (ll(i) = 0; (i) < (int)(n); (i)++)
#define rrep(i, a, b) for (ll i = (a); i < (b); i++)
#define rrrep(i, a, b) for (ll i = (a); i >= (b); i--)
#define all(v) (v).begin(), (v).end()
#define Size(n) (n).size()
#define Cout(x) cout << (x) << endl
#define doublecout(a) cout << fixed << setprecision(15) << a << endl;
#define fi first
#define se second
#define m_p make_pair
#define p_b push_back

//------ Believe yourself as a genius!!!!!! ------

int dy[] = {1, 0, -1, 0};
int dx[] = {0, 1, 0, -1};
// int dy[]={-1,0,1,-1,1,-1,0,1};int dx[]={-1,-1,-1,0,0,1,1,1};
string alph("abcdefghijklmnopqrstuvwxyz");
char s[100][100];
ll n, cnt, ans, a, b, c, d, tmp, m, h, w, x, y, sum, k, q;
ll sy, sx, gy, gx;

int main(void) {
  cin.tie(0);
  cout.tie(0);
  ios::sync_with_stdio(false);

  cin >> h >> w >> sy >> sx >> gy >> gx;
  rep(i, h) rep(j, w) cin >> s[i][j];
  sy--;
  sx--;
  gy--;
  gx--;

  ll min_cost[h + 10][w + 10];
  rep(i, h) rep(j, w) min_cost[i][j] = LINF;
  queue<P> qu;
  qu.push({sy, sx});
  min_cost[sy][sx] = 0;

  while (!qu.empty()) {
    auto p = qu.front();
    qu.pop();
    rep(i, 4) {
      int nx = p.se + dx[i], ny = p.fi + dy[i];
      if (nx < 0 || ny < 0 || nx >= w || ny >= h) continue;
      if (s[ny][nx] == '#') continue;
      if (min_cost[p.fi][p.se] + 1 >= min_cost[ny][nx]) continue;
      min_cost[ny][nx] = min_cost[p.fi][p.se] + 1;
      qu.push({ny, nx});
    }
  }
  Cout(min_cost[gy][gx]);
  return 0;
}
