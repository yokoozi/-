#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> P;
typedef vector<ll> V;
typedef unordered_map<ll, ll> U_MAP;
typedef priority_queue<ll> pq;
typedef priority_queue<ll, vector<ll>, greater<ll>> rpq;
constexpr ll INF = 1e9, MOD = 1e9 + 7, ohara = 1e6 + 10;
constexpr ll LINF = 1e18;

#define rep(i, n) for (ll i = 0LL; (i) < (ll)(n); (i)++)
#define rrep(i, a, b) for (ll i = (ll)(a); i < (ll)(b); i++)
#define rrrep(i, a, b) for (ll i = (ll)(a); i >= (ll)(b); i--)
#define all(v) (v).begin(), (v).end()
#define Size(n) (n).size()
#define Cout(x) cout << (x) << endl
#define doublecout(a) cout << fixed << setprecision(15) << a << endl;
#define fi first
#define se second
#define m_p make_pair
#define p_b push_back

//------ Believe yourself as a genius!!!!!! ------

int dy[] = {1, 0, -1, 0};
int dx[] = {0, 1, 0, -1};
// int dy[]={-1,0,1,-1,1,-1,0,1};int dx[]={-1,-1,-1,0,0,1,1,1};
string alph("abcdefghijklmnopqrstuvwxyz"), s;
ll n, cnt, ans, a[ohara], b, c, d, tmp, m, h, w, x, y, sum, k, q;
ll u[ohara], v[ohara], dp[ohara];
V g[ohara];
bool vi[ohara];

template <typename T, int MAX_LOG, typename D = int>
struct BinaryTrie {
 public:
  struct Node {
    Node *nxt[2];
    D exist;
    vector<int> accept;

    Node() : nxt{nullptr, nullptr}, exist(0) {}
  };

  Node *root;

  explicit BinaryTrie() : root(new Node()) {}

  explicit BinaryTrie(Node *root) : root(root) {}

  void add(const T &bit, int idx = -1, D delta = 1, T xor_val = 0) {
    root = add(root, bit, idx, MAX_LOG, delta, xor_val);
  }

  void erase(const T &bit, T xor_val = 0) { add(bit, -1, -1, xor_val); }

  Node *find(const T &bit, T xor_val = 0) {
    return find(root, bit, MAX_LOG, xor_val);
  }

  D count(const T &bit, T xor_val = 0) {
    auto node = find(bit, xor_val);
    return node ? node->exist : 0;
  }

  pair<T, Node *> min_element(T xor_val = 0) {
    assert(root->exist > 0);
    return kth_element(0, xor_val);
  }

  pair<T, Node *> max_element(T xor_val = 0) {
    assert(root->exist > 0);
    return kth_element(root->exist - 1, xor_val);
  }

  pair<T, Node *> kth_element(D k, T xor_val = 0) {  // 0-indexed
    assert(0 <= k && k < root->exist);
    return kth_element(root, k, MAX_LOG, xor_val);
  }

  D count_less(const T &bit, T xor_val = 0) {  // < bit
    return count_less(root, bit, MAX_LOG, xor_val);
  }

 private:
  virtual Node *clone(Node *t) { return t; }

  Node *add(Node *t, T bit, int idx, int depth, D x, T xor_val,
            bool need = true) {
    if (need) t = clone(t);
    if (depth == -1) {
      t->exist += x;
      if (idx >= 0) t->accept.emplace_back(idx);
    } else {
      bool f = (xor_val >> depth) & 1;
      auto &to = t->nxt[f ^ ((bit >> depth) & 1)];
      if (!to) to = new Node(), need = false;
      to = add(to, bit, idx, depth - 1, x, xor_val, need);
      t->exist += x;
    }
    return t;
  }

  Node *find(Node *t, T bit, int depth, T xor_val) {
    if (depth == -1) {
      return t;
    } else {
      bool f = (xor_val >> depth) & 1;
      auto &to = t->nxt[f ^ ((bit >> depth) & 1)];
      return to ? find(to, bit, depth - 1, xor_val) : nullptr;
    }
  }

  pair<T, Node *> kth_element(Node *t, D k, int bit_index,
                              T xor_val) {  // 0-indexed
    if (bit_index == -1) {
      return {0, t};
    } else {
      bool f = (xor_val >> bit_index) & 1;
      if ((t->nxt[f] ? t->nxt[f]->exist : 0) <= k) {
        auto ret =
            kth_element(t->nxt[f ^ 1], k - (t->nxt[f] ? t->nxt[f]->exist : 0),
                        bit_index - 1, xor_val);
        ret.first |= T(1) << bit_index;
        return ret;
      } else {
        return kth_element(t->nxt[f], k, bit_index - 1, xor_val);
      }
    }
  }

  D count_less(Node *t, const T &bit, int bit_index, T xor_val) {
    if (bit_index == -1) return 0;
    D ret = 0;
    bool f = (xor_val >> bit_index) & 1;
    if ((bit >> bit_index & 1) and t->nxt[f]) ret += t->nxt[f]->exist;
    if (t->nxt[f ^ (bit >> bit_index & 1)])
      ret += count_less(t->nxt[f ^ (bit >> bit_index & 1)], bit, bit_index - 1,
                        xor_val);
    return ret;
  }
};
ll sz = 0;              // st の size
BinaryTrie<ll, 32> st;  // 32(10^9) or 64(10^18)

// 集合 S に X を追加
// S から X を削除
// S の中で k 番目（0 - indexed）に小さい値を求める

void dfs(ll root, ll dep) {
  if (vi[root]) return;
  vi[root] = true;
  st.add(a[root]);
  sz++;
  ll mi = LINF, ma = -LINF;
  rep(i, Size(g[root])) {
    ll chi = g[root][i];
    if (!vi[chi]) {
      dfs(chi, dep + 1);
      mi = min(mi, dp[chi]);
      ma = max(ma, dp[chi]);
    }
  }
  if (mi == LINF) {
    ll me;
    if (sz % 2 == 1) {
      me = st.kth_element(sz / 2).fi;
    } else {
      me = (st.kth_element(sz / 2 - 1).fi + st.kth_element(sz / 2).fi) / 2;
    }
    dp[root] = me;
  } else {
    if (dep % 2 == 1)
      dp[root] = mi;
    else
      dp[root] = ma;
  }
  st.erase(a[root]);
  sz--;
}

int main(void) {
  cin.tie(0);
  cout.tie(0);
  ios::sync_with_stdio(false);

  cin >> n;
  rep(i, n) cin >> a[i];
  rep(i, n - 1) {
    cin >> u[i] >> v[i];
    u[i]--, v[i]--;
    g[u[i]].p_b(v[i]);
    g[v[i]].p_b(u[i]);
  }
  dfs(0, 0);
  Cout(dp[0]);
  return 0;
}