#include <bits/stdc++.h>
typedef long long ll;
typedef long double ld;
const int INF=1e9,MOD=1e9+7,ohara=1e6+10;
const ll LINF=1e18;
using namespace std;
    
#define rep(i,n) for(int (i)=0;(i)<(int)(n);(i)++)
#define rrep(i,a,b) for(int i=(a);i<(b);i++)
#define rrrep(i,a,b) for(int i=(a);i>=(b);i--)
#define all(v) (v).begin(), (v).end()
#define Size(n) (n).size()
#define Cout(x) cout<<(x)<<endl
#define doublecout(a) cout<<fixed<<setprecision(15)<<a<<endl;
#define Cerr(x) cerr<<(x)<<endl
#define fi first
#define se second
#define P pair<ll,ll> 
#define m_p make_pair
#define V vector<ll> 
#define U_MAP unordered_map<ll,ll>
#define pq priority_queue<ll>
#define rpq priority_queue<ll,vector<ll>,greater<ll>>
    
ll n,cnt,a,b,c,d[ohara],tmp,tmpp,m,h,w,x,y,sum,pos,k;
ld doua;
int dy[]={1,0,-1,0};
int dx[]={0,1,0,-1};
//int dy[]={-1,0,1,-1,1,-1,0,1};
//int dx[]={-1,-1,-1,0,0,1,1,1};
string alph("abcdefghijklmnopqrstuvwxyz"),first,last,s[ohara];
bool fl;
struct edge{ll to,cost;};
vector<edge> g[ohara];
ll pre[ohara];
    
//-------------------------↓↓↓↓↓↓------------------------
    
//------ 自分を天才だと信じる ------


void dijkstra(ll s){
        priority_queue<pair<ll,ll>,vector<pair<ll,ll>>,greater<pair<ll,ll>>>que;
        fill(d,d+n,LINF);
        fill(pre,pre+n,-1);
        d[s]=0;
        que.push(pair<ll,ll>(0LL,s));
        while(!que.empty()){
            pair<ll,ll> p=que.top();que.pop();
            ll v=p.second;
            if(d[v]<p.first)continue;
            rep(i,Size(g[v])){
                edge e=g[v][i];
                if(d[e.to]>d[v]+e.cost){
                    d[e.to]=d[v]+e.cost;
                    pre[e.to]=v;
                    que.push(pair<ll,ll>(d[e.to],e.to));
                }
            }
        }
}

vector<ll> get_path(ll t){
    vector<ll> path;
    for(;t!=-1;t=pre[t]){
        path.push_back(t);
    }
    reverse(all(path));
    return path;
}
    
int main(void){
    cin.tie(0);
    cout.tie(0);
    ios::sync_with_stdio(false);
    
    cin>>first>>last>>n;
    rep(i,n){
        cin>>s[i+1];
    }
    s[0]=first;
    s[n+1]=last;
    n+=2;
    rep(i,n){
        rrep(j,i+1,n){
            string co1=s[i],co2=s[j];
            int ok=0;
            rep(k,Size(co1)){
                if(co1[k]!=co2[k])ok++;
            }
            if(ok<=1)g[i].push_back({j,1LL}),g[j].push_back({i,1LL});
        }
    }
    dijkstra(0);//始点sからdijkstra(s)でok

    if(d[n-1]==LINF){
        Cout(-1);
        return 0;
    }
    Cout(d[n-1]-1);
    vector<ll> ans=get_path(n-1);//始点sから終点tまでのpathを出す。get_path(t)でok
    rep(i,Size(ans)){
        cout<<s[ans[i]]<<"\n";
    }
    return 0;
}