#pragma target("avx")
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> P;
typedef vector<ll> V;
typedef unordered_map<ll, ll> U_MAP;
typedef priority_queue<ll> pq;
typedef priority_queue<ll, vector<ll>, greater<ll>> rpq;
constexpr ll INF = 1e9, MOD = 1e9 + 7, ohara = 1e6 + 10;
constexpr ll LINF = 1e18;

#define rep(i, n) for (ll(i) = 0; (i) < (int)(n); (i)++)
#define rrep(i, a, b) for (ll i = (a); i < (b); i++)
#define rrrep(i, a, b) for (ll i = (a); i >= (b); i--)
#define all(v) (v).begin(), (v).end()
#define Size(n) (n).size()
#define Cout(x) cout << (x) << endl
#define doublecout(a) cout << fixed << setprecision(15) << a << endl;
#define fi first
#define se second
#define m_p make_pair
#define p_b push_back
string to_string(string s) { return '"' + s + '"'; }
string to_string(const char* s) { return to_string((string)s); }
string to_string(bool b) { return (b ? "true" : "false"); }
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto& x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
void debug_out() { cerr << endl; }
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)

//------ Believe yourself as a genius!!!!!! ------

namespace internal {

template <class T>
struct simple_queue {
  std::vector<T> payload;
  ll pos = 0;
  void reserve(ll n) { payload.reserve(n); }
  ll size() const { return ll(payload.size()) - pos; }
  bool empty() const { return pos == ll(payload.size()); }
  void push(const T& t) { payload.push_back(t); }
  T& front() { return payload[pos]; }
  void clear() {
    payload.clear();
    pos = 0;
  }
  void pop() { pos++; }
};

}  // namespace internal

template <class Cap>
struct mf_graph {
 public:
  mf_graph() : _n(0) {}
  mf_graph(ll n) : _n(n), g(n) {}

  ll add_edge(ll from, ll to, Cap cap) {
    assert(0 <= from && from < _n);
    assert(0 <= to && to < _n);
    assert(0 <= cap);
    ll m = ll(pos.size());
    pos.push_back({from, ll(g[from].size())});
    ll from_id = ll(g[from].size());
    ll to_id = ll(g[to].size());
    if (from == to) to_id++;
    g[from].push_back(_edge{to, to_id, cap});
    g[to].push_back(_edge{from, from_id, 0});
    return m;
  }

  struct edge {
    ll from, to;
    Cap cap, flow;
  };

  edge get_edge(ll i) {
    ll m = ll(pos.size());
    assert(0 <= i && i < m);
    auto _e = g[pos[i].first][pos[i].second];
    auto _re = g[_e.to][_e.rev];
    return edge{pos[i].first, _e.to, _e.cap + _re.cap, _re.cap};
  }
  std::vector<edge> edges() {
    ll m = ll(pos.size());
    std::vector<edge> result;
    for (ll i = 0; i < m; i++) {
      result.push_back(get_edge(i));
    }
    return result;
  }
  void change_edge(ll i, Cap new_cap, Cap new_flow) {
    ll m = ll(pos.size());
    assert(0 <= i && i < m);
    assert(0 <= new_flow && new_flow <= new_cap);
    auto& _e = g[pos[i].first][pos[i].second];
    auto& _re = g[_e.to][_e.rev];
    _e.cap = new_cap - new_flow;
    _re.cap = new_flow;
  }

  Cap flow(ll s, ll t) { return flow(s, t, std::numeric_limits<Cap>::max()); }
  Cap flow(ll s, ll t, Cap flow_limit) {
    assert(0 <= s && s < _n);
    assert(0 <= t && t < _n);
    assert(s != t);

    std::vector<ll> level(_n), iter(_n);
    internal::simple_queue<ll> que;

    auto bfs = [&]() {
      std::fill(level.begin(), level.end(), -1);
      level[s] = 0;
      que.clear();
      que.push(s);
      while (!que.empty()) {
        ll v = que.front();
        que.pop();
        for (auto e : g[v]) {
          if (e.cap == 0 || level[e.to] >= 0) continue;
          level[e.to] = level[v] + 1;
          if (e.to == t) return;
          que.push(e.to);
        }
      }
    };
    auto dfs = [&](auto self, ll v, Cap up) {
      if (v == s) return up;
      Cap res = 0;
      ll level_v = level[v];
      for (ll& i = iter[v]; i < ll(g[v].size()); i++) {
        _edge& e = g[v][i];
        if (level_v <= level[e.to] || g[e.to][e.rev].cap == 0) continue;
        Cap d = self(self, e.to, std::min(up - res, g[e.to][e.rev].cap));
        if (d <= 0) continue;
        g[v][i].cap += d;
        g[e.to][e.rev].cap -= d;
        res += d;
        if (res == up) break;
      }
      return res;
    };

    Cap flow = 0;
    while (flow < flow_limit) {
      bfs();
      if (level[t] == -1) break;
      std::fill(iter.begin(), iter.end(), 0);
      while (flow < flow_limit) {
        Cap f = dfs(dfs, t, flow_limit - flow);
        if (!f) break;
        flow += f;
      }
    }
    return flow;
  }

  std::vector<bool> min_cut(ll s) {
    std::vector<bool> visited(_n);
    internal::simple_queue<ll> que;
    que.push(s);
    while (!que.empty()) {
      ll p = que.front();
      que.pop();
      visited[p] = true;
      for (auto e : g[p]) {
        if (e.cap && !visited[e.to]) {
          visited[e.to] = true;
          que.push(e.to);
        }
      }
    }
    return visited;
  }

 private:
  ll _n;
  struct _edge {
    ll to, rev;
    Cap cap;
  };
  std::vector<std::pair<ll, ll>> pos;
  std::vector<std::vector<_edge>> g;
};

int dy[] = {1, 0, -1, 0};
int dx[] = {0, 1, 0, -1};
// int dy[]={-1,0,1,-1,1,-1,0,1};int dx[]={-1,-1,-1,0,0,1,1,1};
string alph("abcdefghijklmnopqrstuvwxyz");
char c[200][200], ans[200][200];
ll n, cnt, a, b, d, tmp, m, h, w, x, y, sum, k, q;

int main(void) {
  cin.tie(0);
  cout.tie(0);
  ios::sync_with_stdio(false);

  cin >> n >> m;
  rep(i, n) rep(j, m) cin >> c[i][j], ans[i][j] = c[i][j];

  mf_graph<ll> g(n * m + 10);
  ll s = 0, t = n * m + 1;

  rep(i, n) {
    rep(j, m) {
      if (c[i][j] == '#') continue;
      if ((i + j) % 2 == 0) {
        g.add_edge(s, i * m + j + 1, 1);
        rep(k, 4) {
          int nx = j + dx[k], ny = i + dy[k];
          if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
          if (c[ny][nx] == '#') continue;
          g.add_edge(i * m + j + 1, ny * m + nx + 1, 1);
          // cout << i * n + j + 1 << " " << ny * n + nx + 1 << "\n";
        }
      } else
        g.add_edge(i * m + j + 1, t, 1);
    }
  }
  Cout(g.flow(s, t));

  auto edges = g.edges();
  for (auto e : edges) {
    // cout << e.from << " " << e.to << " " << e.cap << " " << e.flow << "\n";
    if (e.from == s || e.to == t || e.flow == 0) continue;
    int x1, y1, x2, y2;
    y1 = (e.from - 1) / m, x1 = (e.from - 1) % m;
    y2 = (e.to - 1) / m, x2 = (e.to - 1) % m;
    if (y1 < y2)
      ans[y1][x1] = 'v', ans[y2][x2] = '^';
    else if (y1 > y2)
      ans[y1][x1] = '^', ans[y2][x2] = 'v';
    else if (x1 > x2)
      ans[y1][x1] = '<', ans[y2][x2] = '>';
    else
      ans[y1][x1] = '>', ans[y2][x2] = '<';
  }

  rep(i, n) {
    rep(j, m) { cout << ans[i][j]; }
    cout << "\n";
  }

  return 0;
}