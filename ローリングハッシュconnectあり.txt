#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> P;
typedef vector<ll> V;
typedef unordered_map<ll, ll> U_MAP;
typedef priority_queue<ll> pq;
typedef priority_queue<ll, vector<ll>, greater<ll>> rpq;
constexpr ll INF = 1e9, MOD = 1e9 + 7, ohara = 1e6 + 10;
constexpr ll LINF = 1e18;

#define rep(i, n) for (ll i = 0LL; (i) < (ll)(n); (i)++)
#define rrep(i, a, b) for (ll i = (ll)(a); i < (ll)(b); i++)
#define rrrep(i, a, b) for (ll i = (ll)(a); i >= (ll)(b); i--)
#define all(v) (v).begin(), (v).end()
#define Size(n) (n).size()
#define Cout(x) cout << (x) << endl
#define doublecout(a) cout << fixed << setprecision(15) << a << endl;
#define fi first
#define se second
#define m_p make_pair
#define p_b push_back

//------ Believe yourself as a genius!!!!!! ------

struct RollingHash {
private:
  using ull = unsigned long long;
  static const ull _mod = 0x1fffffffffffffff;
  static ull _base;
  vector<ull> _hashed, _power;

  inline ull _mul(ull a, ull b) const {
    ull au = a >> 31;
    ull ad = a & ((1UL << 31) - 1);
    ull bu = b >> 31;
    ull bd = b & ((1UL << 31) - 1);
    ull mid = ad * bu + au * bd;
    ull midu = mid >> 30;
    ull midd = mid & ((1UL << 30) - 1);
    ull ans = au * bu * 2 + midu + (midd << 31) + ad * bd;

    ans = (ans >> 61) + (ans & _mod);
    if (ans >= _mod)
      ans -= _mod;
    return ans;
  }

public:
  RollingHash(const string &s) {
    ll n = s.size();
    _hashed.assign(n + 1, 0);
    _power.assign(n + 1, 0);
    _power[0] = 1;
    for (ll i = 0; i < n; i++) {
      _power[i + 1] = _mul(_power[i], _base);
      _hashed[i + 1] = _mul(_hashed[i], _base) + s[i];
      if (_hashed[i + 1] >= _mod)
        _hashed[i + 1] -= _mod;
    }
  }

  ull get(ll l, ll r) const {
    ull ret = _hashed[r] + _mod - _mul(_hashed[l], _power[r - l]);
    if (ret >= _mod)
      ret -= _mod;
    return ret;
  }

  ull connect(ull h1, ull h2, ll h2len) const {
    ull ret = _mul(h1, _power[h2len]) + h2;
    if (ret >= _mod)
      ret -= _mod;
    return ret;
  }

  void connect(const string &s) {
    ll n = _hashed.size() - 1, m = s.size();
    _hashed.resize(n + m + 1);
    _power.resize(n + m + 1);
    for (ll i = n; i < n + m; i++) {
      _power[i + 1] = _mul(_power[i], _base);
      _hashed[i + 1] = _mul(_hashed[i], _base) + s[i - n];
      if (_hashed[i + 1] >= _mod)
        _hashed[i + 1] -= _mod;
    }
  }

  ll LCP(const RollingHash &b, ll l1, ll r1, ll l2, ll r2) const {
    ll len = min(r1 - l1, r2 - l2);
    ll low = -1, high = len + 1;
    while (high - low > 1) {
      ll mid = (low + high) / 2;
      if (get(l1, l1 + mid) == b.get(l2, l2 + mid))
        low = mid;
      else
        high = mid;
    }
    return low;
  }
};

mt19937_64 mt{(unsigned int)time(NULL)};
RollingHash::ull RollingHash::_base = mt() % RollingHash::_mod;

int dy[] = {1, 0, -1, 0};
int dx[] = {0, 1, 0, -1};
// int dy[]={-1,0,1,-1,1,-1,0,1};int dx[]={-1,-1,-1,0,0,1,1,1};
string alph("abcdefghijklmnopqrstuvwxyz"), s;
ll n, cnt, ans, a, b, c, d, tmp, m, h, w, x, y, sum, k, q;

int main(void) {
  cin.tie(0);
  cout.tie(0);
  ios::sync_with_stdio(false);

  cin >> n >> s;

  // 構築 O(N), get_and_connect O(1), LCP O(logN)
  // get(l, r) [l,r)のハッシュ値を手に入れる
  // connect(a, b, len) ハッシュ値aと、長さlenのハッシュ値bを結合
  RollingHash be(s);
  reverse(all(s));
  RollingHash af(s);
  reverse(all(s));
  rep(i, n + 1) {
    auto X = be.get(0, i);
    auto Y = be.get(Size(s) - n + i, Size(s));
    if (be.connect(X, Y, n - i) == af.get(n - i, 2 * n - i)) {
      Cout(s.substr(0, i) + s.substr(Size(s) - n + i, Size(s)));
      Cout(i);
      return 0;
    }
  }
  Cout(-1);
  return 0;
}