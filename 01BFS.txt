#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> P;
typedef vector<ll> V;
typedef unordered_map<ll, ll> U_MAP;
typedef priority_queue<ll> pq;
typedef priority_queue<ll, vector<ll>, greater<ll>> rpq;
constexpr ll INF = 1e9, MOD = 1e9 + 7, ohara = 1e6 + 10;
constexpr ll LINF = 1e18;

#define rep(i, n) for (ll i = 0LL; (i) < (ll)(n); (i)++)
#define rrep(i, a, b) for (ll i = (ll)(a); i < (ll)(b); i++)
#define rrrep(i, a, b) for (ll i = (ll)(a); i >= (ll)(b); i--)
#define all(v) (v).begin(), (v).end()
#define Size(n) (n).size()
#define Cout(x) cout << (x) << endl
#define doublecout(a) cout << fixed << setprecision(15) << a << endl;
#define fi first
#define se second
#define m_p make_pair
#define p_b push_back
string to_string(string s) { return '"' + s + '"'; }
string to_string(const char* s) { return to_string((string)s); }
string to_string(bool b) { return (b ? "true" : "false"); }
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto& x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
void debug_out() { cerr << endl; }
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)

//------ Believe yourself as a genius!!!!!! ------

int dy[] = {1, 0, -1, 0, 0};
int dx[] = {0, 1, 0, -1, 0};
int dy2[] = {-1, 0, 1, -1, 1, -1, 0, 1, 0};
int dx2[] = {-1, -1, -1, 0, 0, 1, 1, 1, 0};
string alph("abcdefghijklmnopqrstuvwxyz");
char s[600][600];
ll n, cnt, ans, a, b, c, d, tmp, m, h, w, x, y, sum, k, q;
bool vi[600][600];

int main(void) {
  cin.tie(0);
  cout.tie(0);
  ios::sync_with_stdio(false);

  cin >> h >> w;
  rep(i, h) rep(j, w) cin >> s[i][j];

  ll min_cost[h + 10][w + 10];
  rep(i, h) rep(j, w) min_cost[i][j] = LINF;
  deque<P> qu;
  qu.push_front({0, 0});
  min_cost[0][0] = 0;

  // 01BFSはdequeを使う
  //都合のいいコスト０（コストの小さい）ものをfrontにpush
  //都合の悪いコスト1（コストが大きい）ものをbackにpush
  // vi[y][x]=trueならもう見ないは正しい
  //なぜなら都合のいいものを前にpushしてるから

  while (!qu.empty()) {
    auto p = qu.front();
    qu.pop_front();
    if (vi[p.fi][p.se]) continue;
    vi[p.fi][p.se] = true;
    rep(i, 4) {
      int nx = p.se + dx[i], ny = p.fi + dy[i];
      if (nx < 0 || ny < 0 || nx >= w || ny >= h) continue;
      if (s[ny][nx] == '#') continue;
      if (min_cost[p.fi][p.se] >= min_cost[ny][nx]) continue;
      min_cost[ny][nx] = min_cost[p.fi][p.se];
      qu.push_front({ny, nx});
    }
    rrep(addy, -2, 3) {
      rrep(addx, -2, 3) {
        int nx = p.se + addx, ny = p.fi + addy;
        if (nx < 0 || ny < 0 || nx >= w || ny >= h) continue;
        if (abs(addx) == 2 && abs(addy) == 2) continue;
        if (s[ny][nx] == '.') continue;
        if (min_cost[p.fi][p.se] + 1 >= min_cost[ny][nx]) continue;
        min_cost[ny][nx] = min_cost[p.fi][p.se] + 1;
        qu.push_back({ny, nx});
      }
    }
  }
  Cout(min_cost[h - 1][w - 1]);
  return 0;
}