#include <bits/stdc++.h>
typedef long long ll;
typedef long double ld;
const int INF=1e9,MOD=1e9+7,ohara=1e6+10;
const ll LINF=1e18;
using namespace std;
    
#define rep(i,n) for(int (i)=0;(i)<(int)(n);(i)++)
#define rrep(i,a,b) for(int i=(a);i<(b);i++)
#define rrrep(i,a,b) for(int i=(a);i>=(b);i--)
#define all(v) (v).begin(), (v).end()
#define Size(n) (n).size()
#define Cout(x) cout<<(x)<<endl
#define doublecout(a) cout<<fixed<<setprecision(15)<<a<<endl;
#define Cerr(x) cerr<<(x)<<endl
#define fi first
#define se second
#define P pair<ll,ll> 
#define m_p make_pair
#define V vector<ll> 
#define U_MAP unordered_map<ll,ll>
#define pq priority_queue<ll>
#define rpq priority_queue<ll,vector<ll>,greater<ll>>
#define p_b push_back
    
ll n,cnt,ans,a[ohara],b[ohara],c[ohara],d[ohara],tmp,tmpp,m,h,w,x,y,sum,pos,k;
ld doua;
int dy[]={1,0,-1,0};
int dx[]={0,1,0,-1};
//int dy[]={-1,0,1,-1,1,-1,0,1};
//int dx[]={-1,-1,-1,0,0,1,1,1};
string alph("abcdefghijklmnopqrstuvwxyz"),s;
bool fl;
struct edge{int to,cost;};
queue<ll> que;
V g[ohara];
U_MAP mp;
bool vi[ohara];
P p[ohara];
ll p_cou;
ll madep;

//-------------------------Å´Å´Å´Å´Å´Å´------------------------
    
//------ é©ï™ÇìVçÀÇæÇ∆êMÇ∂ÇÈ ------

void dfs(ll now,ll dep){
    if(vi[now])return;
    vi[now]=true;
    madep=max(madep,dep);
    p[p_cou++]=m_p(dep,now);
    rep(i,Size(g[now])){
        dfs(g[now][i],dep+1);
    }
}
    
int main(void){
    cin.tie(0);
    cout.tie(0);
    ios::sync_with_stdio(false);
    
    cin>>n;
    rep(i,n-1){
        cin>>a[i]>>b[i]>>c[i];
        a[i]--;b[i]--;
        g[a[i]].p_b(b[i]);
        g[b[i]].p_b(a[i]);
        mp[a[i]]++;
        mp[b[i]]++;
    }
    rep(i,n){
        if(mp[i]==1&&cnt==0){
            cnt=1;
            dfs(i,0LL);
            continue;
        }
        if(mp[i]==1)que.push(i),vi[i]=true;
    }
    sort(p,p+p_cou);
    reverse(p,p+p_cou);
    rep(i,p_cou){
        ll now=p[i].se;
        if(p[i].fi==madep&&now!=êe)d[now]=1;
        else{
            cnt=0;
            rep(j,Size(g[now])){
                cnt+=d[g[now][j]];
            }
            d[now]=cnt+1;
        }
    }
    rep(i,n-1){
        ll kosuu=min(d[a[i]],d[b[i]]);
        ans+=c[i]*kosuu*(n-kosuu)*2;
    }
    Cout(ans);
    return 0;
}