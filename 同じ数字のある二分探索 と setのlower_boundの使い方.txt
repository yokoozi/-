#include <bits/stdc++.h>
typedef long long ll;
typedef long double ld;
const int INF=1e9,MOD=1e9+7,ohara=1e6+10;
const ll LINF=1e18;
using namespace std;
    
#define rep(i,n) for(int (i)=0;(i)<(int)(n);(i)++)
#define rrep(i,a,b) for(int i=(a);i<(b);i++)
#define rrrep(i,a,b) for(int i=(a);i>=(b);i--)
#define all(v) (v).begin(), (v).end()
#define Size(n) (n).size()
#define Cout(x) cout<<(x)<<endl
#define doublecout(a) cout<<fixed<<setprecision(15)<<a<<endl;
#define Cerr(x) cerr<<(x)<<endl
#define fi first
#define se second
#define P pair<ll,ll> 
#define m_p make_pair
#define V vector<ll> 
#define U_MAP unordered_map<ll,ll>
#define pq priority_queue<ll>
#define rpq priority_queue<ll,vector<ll>,greater<ll>>
    
ll n,cnt,ans[ohara],a[ohara],b,c,d,tmp,tmpp,m,h,w,x,y,pos,k,bit[ohara];
ld doua;
int dy[]={1,0,-1,0};
int dx[]={0,1,0,-1};
//int dy[]={-1,0,1,-1,1,-1,0,1};
//int dx[]={-1,-1,-1,0,0,1,1,1};
string alph("abcdefghijklmnopqrstuvwxyz"),s;
bool fl;
struct edge{int to,cost;};
ll dat[ohara];
ll used[ohara];
set<ll> st;
    
//-------------------------↓↓↓↓↓↓------------------------
    
//------ 自分を天才だと信じる ------

ll sum(ll i){
  ll s=0;
  while(i>0){
    s+=bit[i];
    i-=i&-i;
  }
  return s;
}

void add(ll i,ll x){
  while(i<=n){
    bit[i]+=x;
    i+=i&-i;
  }
}
    
int main(void){
    cin.tie(0);
    cout.tie(0);
    ios::sync_with_stdio(false);
    
    cin>>n;
    rep(i,n)cin>>a[i],add(i+1,i+1),st.insert(i+1);
    rrrep(i,n-1,0){
        ll le=1,ri=n,mid;
        while(ri-le>1){
            mid=(le+ri)/2;
            if((mid==1 ? 0LL : sum(mid-1) )<=a[i])le=mid;
            else ri=mid;
        }
        rrep(j,max(le-2,1LL),min(ri+3,n+1)){
            if((j==1 ? 0LL : sum(j-1) )==a[i]){
                cnt=j;
                break;
            }
        }
        //二分探索でできるだけちっちゃいほうに寄せ解く
        //その後setで使われてない中で、一番、解に近くかつ解よりも大きいやつを出す。
        //0 0 0 0 0 1 1 1 1 1←ここにしたい 1 1  2 2 2 2 2
        // used 1 1 1 1 0 1 1
        //二分探索で1だけの範囲に絞りこのusedをsetで管理し早く0の箇所を特定する
        auto it=st.lower_bound(cnt);
        //cnt以上のsetの中身がitにイテレータ(位置)としてある。中身は*itでアクセス。
        ans[i]=*it;
        add(*it,-(*it));
        st.erase(*it);
    }
    rep(i,n){
        if(i==n-1)Cout(ans[i]);
        else cout<<ans[i]<<" ";
    }
    return 0;
}