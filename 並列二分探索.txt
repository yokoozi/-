//https://atcoder.jp/contests/agc002/submissions/8302004
#include <bits/stdc++.h>
typedef long long ll;
typedef long double ld;
const int INF=1e9,MOD=1e9+7,ohara=1e6+10;
const ll LINF=1e18;
using namespace std;
    
#define rep(i,n) for(ll (i)=0;(i)<(int)(n);(i)++)
#define rrep(i,a,b) for(ll i=(a);i<(b);i++)
#define rrrep(i,a,b) for(ll i=(a);i>=(b);i--)
#define all(v) (v).begin(), (v).end()
#define Size(n) (n).size()
#define Cout(x) cout<<(x)<<endl
#define doublecout(a) cout<<fixed<<setprecision(15)<<a<<endl;
#define Cerr(x) cerr<<(x)<<endl
#define fi first
#define se second
#define P pair<ll,ll> 
#define m_p make_pair
#define V vector<ll> 
#define U_MAP unordered_map<ll,ll>
#define pq priority_queue<ll>
#define rpq priority_queue<ll,vector<ll>,greater<ll>>
#define p_b push_back
    
ll n,cnt,ans,a[ohara],b[ohara],c,d,tmp,tmpp,m,h,w,x[ohara],y[ohara],z[ohara],sum,pos,k,q;
ld doua;
int dy[]={1,0,-1,0};
int dx[]={0,1,0,-1};
//int dy[]={-1,0,1,-1,1,-1,0,1};
//int dx[]={-1,-1,-1,0,0,1,1,1};
string alph("abcdefghijklmnopqrstuvwxyz"),s;
bool fl;
struct edge{int to,cost;};
V play[ohara];
ll le[ohara],ri[ohara];
    
//------ Believe yourself as a genius!!!!!! ------

struct UnionFind{
	std::vector<ll> data;
	
	UnionFind(ll n){
		data.assign(n,-1);
	}
	
	void unite(int x, int y){
		x=find(x); y=find(y);
		if(x==y) return;
		if(data[x]>data[y]) swap(x,y);
		data[x]+=data[y];
		data[y]=x;
	}
	
	int find(int k){
		if(data[k]<0) return k;
		return data[k]=find(data[k]);
	}
 
	ll size(int k) {
		return -data[find(k)];
	}
 
	bool same(int x, int y){
		return find(x)==find(y);
	}
};
    
int main(void){
    cin.tie(0);
    cout.tie(0);
    ios::sync_with_stdio(false);
    
    cin>>n>>m;
    rep(i,m){
        cin>>a[i]>>b[i];
        a[i]--;b[i]--;
    }
    cin>>q;
    rep(i,q){
        cin>>x[i]>>y[i]>>z[i];
        x[i]--;y[i]--;
    }
    rep(i,q){
        play[m/2].p_b(i);
        le[i]=0,ri[i]=m;
    }
    tmp=m/2,tmpp=m/2;
    while(1){
        cnt++;
        if(cnt==20)break;
        UnionFind uf(n+10);
        rep(i,m){
            uf.unite(a[i],b[i]);
            for(ll ind : play[i]){
                ll sz=uf.size(x[ind])+uf.size(y[ind]);
                if(uf.same(x[ind],y[ind]))sz-=uf.size(y[ind]);
                if(sz>=z[ind]){
                    //ok
                    ri[ind]=i;
                }
                else{
                    le[ind]=i;
                }
            }
            play[i].clear();
        }
        rep(i,q){
            play[(le[i]+ri[i])/2].p_b(i);
        }
    }
    rep(i,q)Cout(ri[i]+1);
    return 0;
}
