#include <bits/stdc++.h>
typedef long long ll;
typedef long double ld;
const int INF=1e9,MOD=1e9+7,ohara=1e6+10;
const ll LINF=1e18;
using namespace std;

#define rep(i,n) for(int (i)=0;(i)<(int)(n);(i)++)
#define rrep(i,a,b) for(int i=(a);i<(b);i++)
#define rrrep(i,a,b) for(int i=(a);i>=(b);i--)
#define all(v) (v).begin(), (v).end()
#define Size(n) (n).size()
#define Cout(x) cout<<(x)<<endl
#define doublecout(a) cout<<fixed<<setprecision(15)<<a<<endl;
#define Cerr(x) cerr<<(x)<<endl
#define fi first
#define se second
#define P pair<ll,ll> 
#define m_p make_pair
#define V vector<ll> 
#define U_MAP unordered_map<ll,ll>

ll n,cnt,ans,a[ohara],b,c,d,tmp,tmpp,m,h,w,x,y,sum,pos,k;
ld doua;
int dy[]={1,0,-1,0};
int dx[]={0,1,0,-1};
//int dy[]={-1,0,1,-1,1,-1,0,1};
//int dx[]={-1,-1,-1,0,0,1,1,1};
string alph("abcdefghijklmnopqrstuvwxyz"),s;
bool fl;
struct edge{int to,cost;};
ll dp[4200][4200]; //残り[i,j]から始めたときのJOIの最大

//-------------------------↓↓↓↓↓↓------------------------

//------ 自分を天才だと信じる ------

int main(void){
        cin.tie(0);
        cout.tie(0);
    ios::sync_with_stdio(false);

    cin>>n;
    rep(i,n){
        cin>>a[i];
        a[i+n]=a[i];
    }
    rep(i,2*n+10){
        rep(j,2*n+10){
            dp[i][j]=-LINF;
        }
    }
    rep(i,2*n){
        dp[i][i]=a[i];
    }
    //まずは[i:j]でi=jつまり、一意に定まるのを初期化
    //その後[i:j]j-i=1からj-i=2,3,4,5....と差を動かす。
    //ケーキの切り分け
    rrep(sa,1,n){
        rep(st,2*n){
            ll i,j;
            i=st;
            j=st+sa;
          	if(j>=2*n)continue;
            if((j-i+1)%2==1){
                //JOIの動き
                dp[i][j]=max({dp[i][j],dp[i+1][j]+a[i],dp[i][j-1]+a[j]});
            }
            else{
                //IOIの動き
                if(a[i]>=a[j+1]){
                    dp[i][j]=max(dp[i+1][j],dp[i][j]);
                }
                if(a[(i==0 ? n-1 : i-1 )]<=a[j]){
                    dp[i][j]=max(dp[i][j-1],dp[i][j]);
                }
            }
        }
    }
    rep(i,n){
        ans=max(dp[i][i+n-1],ans);
    }
    Cout(ans);
    return 0;
}
