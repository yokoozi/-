#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> P;
typedef vector<ll> V;
typedef unordered_map<ll, ll> U_MAP;
typedef priority_queue<ll> pq;
typedef priority_queue<ll, vector<ll>, greater<ll>> rpq;
constexpr ll INF = 1e9, MOD = 1e9 + 7, ohara = 1e6 + 10;
constexpr ll LINF = 1e18;

#define rep(i, n) for (ll i = 0LL; (i) < (ll)(n); (i)++)
#define rrep(i, a, b) for (ll i = (ll)(a); i < (ll)(b); i++)
#define rrrep(i, a, b) for (ll i = (ll)(a); i >= (ll)(b); i--)
#define all(v) (v).begin(), (v).end()
#define Size(n) (n).size()
#define Cout(x) cout << (x) << endl
#define doublecout(a) cout << fixed << setprecision(15) << a << endl;
#define fi first
#define se second
#define m_p make_pair
#define p_b push_back

//------ Believe yourself as a genius!!!!!! ------

int dy[] = {1, 0, -1, 0};
int dx[] = {0, 1, 0, -1};
// int dy[]={-1,0,1,-1,1,-1,0,1};int dx[]={-1,-1,-1,0,0,1,1,1};
string alph("abcdefghijklmnopqrstuvwxyz");
vector<string> s;
ll n, cnt, a, b, c, d, tmp, m, h, w, x, y, sum, k, q, ans;
map<vector<string>, bool> mp;

void dfs(ll re_k) {
  if (mp[s]) return;
  mp[s] = true;
  if (re_k == 0) {
    ans++;
    return;
  }
  vector<P> nex;
  rep(i, n) {
    rep(j, n) {
      if (s[i][j] == '#' || s[i][j] == 'B') continue;
      bool fl = false;
      rep(k, 4) {
        int nx = j + dx[k], ny = i + dy[k];
        if (nx < 0 || ny < 0 || nx >= n || ny >= n) continue;
        if (s[ny][nx] == 'B') fl = true;
      }
      if (fl) nex.p_b({i, j});
    }
  }
  for (P e : nex) {
    s[e.fi][e.se] = 'B';
    dfs(re_k - 1);
    s[e.fi][e.se] = '.';
  }
}

int main(void) {
  cin.tie(0);
  cout.tie(0);
  ios::sync_with_stdio(false);

  cin >> n >> k;
  s.resize(n);
  rep(i, n) cin >> s[i];

  rep(i, n) {
    rep(j, n) {
      if (s[i][j] == '#') continue;
      s[i][j] = 'B';
      dfs(k - 1);
      s[i][j] = '.';
    }
  }
  Cout(ans);
  return 0;
}