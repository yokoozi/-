#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> P;
typedef vector<ll> V;
typedef unordered_map<ll, ll> U_MAP;
typedef priority_queue<ll> pq;
typedef priority_queue<ll, vector<ll>, greater<ll>> rpq;
constexpr ll INF = 1e9, MOD = 1e9 + 7, ohara = 1e6 + 10;
constexpr ll LINF = 1e18;

#define rep(i, n) for (ll i = 0LL; (i) < (ll)(n); (i)++)
#define rrep(i, a, b) for (ll i = (ll)(a); i < (ll)(b); i++)
#define rrrep(i, a, b) for (ll i = (ll)(a); i >= (ll)(b); i--)
#define all(v) (v).begin(), (v).end()
#define Size(n) (n).size()
#define Cout(x) cout << (x) << endl
#define doublecout(a) cout << fixed << setprecision(15) << a << endl;
#define fi first
#define se second
#define m_p make_pair
#define p_b push_back

//------ Believe yourself as a genius!!!!!! ------

int dy[] = {1, 0, -1, 0};
int dx[] = {0, 1, 0, -1};
// int dy[]={-1,0,1,-1,1,-1,0,1};int dx[]={-1,-1,-1,0,0,1,1,1};
string alph("abcdefghijklmnopqrstuvwxyz"), s;
ll n, cnt, ans, a, b, c, d, tmp, m, h, w, x[ohara], y[ohara], sum, k, q;

struct Fraction_Comparison {
  ll denominator, numerator;
  // (den, num) = num/den
  Fraction_Comparison(ll D = 1, ll N = -INF) : denominator(D), numerator(N) {}
  // 初期化 何も書かんかった時の値(ここでいう変数 right)
  // LINF * 10^9 はオーバーフローなので -INF に設定してる
  bool operator<(const Fraction_Comparison &other) const {
    return numerator * other.denominator < denominator * other.numerator;
  }
  bool operator<=(const Fraction_Comparison &other) const {
    return numerator * other.denominator <= denominator * other.numerator;
  }
};
// 分数の大小比較
vector<pair<Fraction_Comparison, Fraction_Comparison>> p;

int main(void) {
  cin.tie(0);
  cout.tie(0);
  ios::sync_with_stdio(false);

  cin >> n;
  rep(i, n) cin >> x[i] >> y[i];
  rep(i, n) {
    p.p_b(m_p(Fraction_Comparison(x[i] - 1, y[i]),
              Fraction_Comparison(x[i], y[i] - 1)));
  }
  sort(all(p));
  Fraction_Comparison right;
  rep(i, n) {
    if (right <= p[i].se) {
      ans++;
      right = p[i].fi;
    }
  }
  Cout(ans);
  return 0;
}